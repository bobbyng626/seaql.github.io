(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[8388],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2903:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],s={},l="Using SQLite",c={unversionedId:"write-test/sqlite",id:"write-test/sqlite",isDocsHomePage:!1,title:"Using SQLite",description:"If you want to unit test application logic that does not require database-specific features, SQLite will be a good choice for you.",source:"@site/docs/06-write-test/03-sqlite.md",sourceDirName:"06-write-test",slug:"/write-test/sqlite",permalink:"/SeaORM/docs/write-test/sqlite",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/06-write-test/03-sqlite.md",version:"current",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1627136639,formattedLastUpdatedAt:"7/24/2021",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mock Interface",permalink:"/SeaORM/docs/write-test/mock"},next:{title:"Custom Select",permalink:"/SeaORM/docs/advanced-query/custom-select"}},u=[{value:"Running Unit Test",id:"running-unit-test",children:[]},{value:"Connecting SQLite",id:"connecting-sqlite",children:[]},{value:"Setting Up Database Schema",id:"setting-up-database-schema",children:[]},{value:"Performing CRUD Operations",id:"performing-crud-operations",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-sqlite"},"Using SQLite"),(0,i.kt)("p",null,"If you want to unit test application logic that does not require database-specific features, SQLite will be a good choice for you."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Check out the full demo ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/blob/master/tests/basic.rs"},"here"),".")),(0,i.kt)("h2",{id:"running-unit-test"},"Running Unit Test"),(0,i.kt)("p",null,"By default Rust run all tests in parallel and each test should be independent of other, so if we need a single entry point for it to perform sequential operations. Then, we have the following code snippet connecting to database, setting up database schema and performing CRUD operations in sequence."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[async_std::test]\nasync fn main() {\n    // Connecting SQLite\n    let db: DbConn = setup().await;\n\n    // Setting up database schema\n    setup_schema(&db).await;\n\n    // Performing CRUD operations\n    perform_tests(&db).await.unwrap();\n}\n")),(0,i.kt)("h2",{id:"connecting-sqlite"},"Connecting SQLite"),(0,i.kt)("p",null,"Connect to in memory SQLite database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'pub async fn setup() -> DatabaseConnection {\n    Database::connect("sqlite::memory:").await.unwrap()\n}\n')),(0,i.kt)("h2",{id:"setting-up-database-schema"},"Setting Up Database Schema"),(0,i.kt)("p",null,"Setup schema of SQLite database with SeaQuery query builder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'async fn setup_schema(db: &DbConn) {\n    use sea_query::*;\n\n    // Build create table statement\n    let stmt = sea_query::Table::create()\n        .table(cake::Entity)\n        .col(\n            ColumnDef::new(cake::Column::Id)\n                .integer()\n                .not_null()\n                .auto_increment()\n                .primary_key(),\n        )\n        .col(ColumnDef::new(cake::Column::Name).string())\n        .build(SqliteQueryBuilder);\n\n    // Execute create table statement\n    let result = db\n        .execute(Statement::from_string(DbBackend::Sqlite, stmt))\n        .await;\n    println!("Create table cake: {:?}", result);\n}\n')),(0,i.kt)("h2",{id:"performing-crud-operations"},"Performing CRUD Operations"),(0,i.kt)("p",null,"Perform CRUD operations on SQLite database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'async fn perform_tests(db: &DbConn) -> Result<(), DbErr> {\n    // Insert\n    let apple = cake::ActiveModel {\n        name: Set("Apple Pie".to_owned()),\n        ..Default::default()\n    };\n    let mut apple = apple.save(db).await?;\n\n    // Update\n    apple.name = Set("Lemon Tart".to_owned());\n    let apple = apple.save(db).await?;\n\n    // Retrieve\n    let apple = cake::Entity::find_by_id(1).one(db).await?;\n\n    // Delete\n    let apple: cake::ActiveModel = apple.unwrap().into();\n    let result = apple.delete(db).await?;\n\n    Ok(())\n}\n')))}d.isMDXComponent=!0}}]);