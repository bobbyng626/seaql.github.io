(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[3323],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(t),f=o,d=m["".concat(u,".").concat(f)]||m[f]||c[f]||i;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1469:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a=["components"],l={},u="One to Many",s={unversionedId:"relation/one-to-many",id:"relation/one-to-many",isDocsHomePage:!1,title:"One to Many",description:'An one-to-many relation is similar to one-to-one relation. In previous section we give the example of "a Cake entity has at most one Fruit topping". In one-to-many relation we change the "at most one" constraint. So, we have a Cake entity might have many Fruit toppings.',source:"@site/docs/05-relation/02-one-to-many.md",sourceDirName:"05-relation",slug:"/relation/one-to-many",permalink:"/SeaORM/docs/relation/one-to-many",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/05-relation/02-one-to-many.md",version:"current",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1626418344,formattedLastUpdatedAt:"7/16/2021",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"One to One",permalink:"/SeaORM/docs/relation/one-to-one"},next:{title:"Many to Many",permalink:"/SeaORM/docs/relation/many-to-many"}},p=[{value:"Defining the Relation",id:"defining-the-relation",children:[]},{value:"Defining the Inverse Relation",id:"defining-the-inverse-relation",children:[]}],c={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"one-to-many"},"One to Many"),(0,i.kt)("p",null,'An one-to-many relation is similar to one-to-one relation. In previous section we give the example of "a ',(0,i.kt)("inlineCode",{parentName:"p"},"Cake")," entity has at most one ",(0,i.kt)("inlineCode",{parentName:"p"},"Fruit"),' topping". In one-to-many relation we change the "at most one" constraint. So, we have a ',(0,i.kt)("inlineCode",{parentName:"p"},"Cake")," entity might have many ",(0,i.kt)("inlineCode",{parentName:"p"},"Fruit")," toppings."),(0,i.kt)("h2",{id:"defining-the-relation"},"Defining the Relation"),(0,i.kt)("p",null,"This is almost identical to defining an one-to-one relation, the only different is that we use ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity::has_many()")," method here."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'{9,15,20} title="entity/cake.rs"',"{9,15,20}":!0,title:'"entity/cake.rs"'},"#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]\npub enum Column {\n    Id,\n    Name,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Fruit,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Fruit => Entity::has_many(super::fruit::Entity).into(),\n        }\n    }\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n// ...\n")),(0,i.kt)("h2",{id:"defining-the-inverse-relation"},"Defining the Inverse Relation"),(0,i.kt)("p",null,"It is the same as defining the one-to-one inverse relation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'{10,16,24} title="entity/fruit.rs"',"{10,16,24}":!0,title:'"entity/fruit.rs"'},"#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]\npub enum Column {\n    Id,\n    Name,\n    CakeId,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Cake,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Cake => Entity::belongs_to(super::cake::Entity)\n                .from(Column::CakeId)\n                .to(super::cake::Column::Id)\n                .into(),\n        }\n    }\n}\n\nimpl Related<super::cake::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Cake.def()\n    }\n}\n// ...\n")))}m.isMDXComponent=!0}}]);